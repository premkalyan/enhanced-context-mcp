description: Core SDLC Process - Universal enterprise workflow and fundamental rules
globs:
alwaysApply: true

# Core Enterprise SDLC Process
# =============================

##  MANDATORY SDLC PROCESS - COMPLETE CYCLE REQUIRED
  **CRITICAL**: NEVER close JIRA stories until ALL steps are complete!

### ** Complete SDLC Cycle (NO SHORTCUTS)**
1. ** Story → In Progress** (JIRA transition + regular JIRA updates)
2. ** Design Documentation** (For major/system features: Create comprehensive design with diagrams, update Confluence for review)
3. ** Implementation** (Development work)
4. ** GitHub Issues** (Create test cases using GitHub Issue templates)
5. ** Test Case Implementation** (Generate and implement automated test cases with Allure)
6. ** Local Test Execution** (Run all tests locally and ensure they pass - lint, unit, integration, E2E)
7. ** Manual Functionality Verification** (Manual testing of implemented features AFTER automated tests pass)
8. ** PR Creation** (Agent creates PR using git/GitHub CLI commands OR enterprise script ./create-pr.sh)
9. **⏳ WAIT: GitHub Actions Success** (ALL CI/CD checks pass - lint, tests, security, build validation)
10. ** CRITICAL GATE**: NEVER run MCP PR review until ALL GitHub Actions are GREEN
11. ** Enhanced 3-Step PR Review** (ONLY after CI/CD passes: describe → review + implement → improve + human review)
12. ** Agent Implementation & Commit** (Agent fixes obvious issues from pr_review feedback)
13. ** Human Suggestion Review** (pr_improve creates inline suggestions for human approval)
14. ** Future: Automated Security Remediation** (CodeQL analysis - disabled for now, future reference)
15. ** Commit Squashing** (Clean git history: squash feature commits into logical units before merge)
16. ** Branch Merge** (HUMAN ONLY - AI agents NEVER merge PRs)
17. ** Confluence Documentation** (Update technical documentation)
18. ** Story → Done** (ONLY after merge complete)

### ** NEVER DO THIS:**
- Close JIRA stories after development only
- Skip design documentation for major/system features
- Skip manual functionality verification after implementation
- Skip testing phases (GitHub Issues + automated test implementation with Allure)
- **Push code or create PR without running ALL tests locally first**
- ** CRITICAL: Run MCP PR review (pr_describe, pr_review, pr_improve) BEFORE GitHub Actions pass**
- ** CRITICAL: Waste time reviewing code that might fail CI/CD checks**
- Merge without PR review
- Transition to Done before branch merge
- **AI agents NEVER merge PRs - HUMAN ONLY ACTION**
- Skip any step of the 3-step enhanced MCP review workflow
- **Squash commits before all PR feedback is incorporated** (wait until ready for merge)
- Future: Skip automated security remediation analysis (CodeQL - disabled for workflow optimization)
- Skip Kiwi-TCMS test case creation
- Skip automated test case implementation
- Skip Confluence documentation updates

### ** ALWAYS DO THIS:**
- **NEVER start coding without a JIRA story**
- **Create comprehensive design documentation for major/system features before implementation**
- Use MCP tools for JIRA, Confluence, GitHub integration
- Update story status throughout ENTIRE development cycle
- Keep stories open until merge is complete
- ** CRITICAL: WAIT for ALL GitHub Actions to pass BEFORE running MCP PR review**
- ** CRITICAL: Only invest human/AI review time on code that passes all automated checks**
- **Complete ALL 3 steps of enhanced MCP review process ONLY after CI/CD passes**
- **Create test cases in GitHub Issues using templates after implementation**
- **Implement automated test cases with Allure reporting after GitHub Issues planning**
- **Run ALL tests locally and ensure they pass before creating PR (lint, unit, integration, E2E)**
- **Perform manual functionality verification AFTER automated tests pass to ensure end-to-end quality**
- **Future: Execute automated security remediation analysis after CodeQL scan (disabled for workflow optimization)**
- **Future: Apply safe automated security fixes and review complex issues manually (CodeQL workflow)**
- **Squash commits into logical units before merge** (clean git history for enterprise standards)
- **Update Confluence documentation with technical details**
- **Act as developer with highest standards**: quality, maintainability, security, performance, extensibility

##  ENVIRONMENT ARCHITECTURE
```bash
# Configure project-specific environment architecture
# Example 3-tier setup:
Local Dev:  Frontend {DEV_PORT} ↔ Backend {DEV_PORT+1} (NODE_ENV=development)
UAT:        Frontend {UAT_PORT} ↔ Backend {UAT_PORT+1} (NODE_ENV=production)
QA/CI:      Frontend {QA_PORT} ↔ Backend {QA_PORT+1} (NODE_ENV=test)
```

##  DATABASE STRATEGY
```typescript
// Always design schema FIRST, then implement features
// Use appropriate migrations for all schema changes
// Environment-specific databases: {project}_dev, {project}_prod, {project}_test
// Backend port configuration: environment-aware defaults
```

##  QUALITY STANDARDS (Developer Excellence)
- **Performance**: <2s page loads, optimized bundles, database query optimization
- **Security**: Authentication, data protection, XSS/CSRF protection, sensitive field protection (@hide)
- **Maintainability**: Clean code, modular architecture, TypeScript type safety
- **Extensibility**: Multi-tenant architecture, campaign feature extensibility
- **Testing**: >90% coverage, unit/integration/E2E, Kiwi-TCMS integration
- **Architecture**: Prisma best practices, Docker deployment readiness, port compliance
- **Design**: Figma design system compliance, responsive design patterns
- **Documentation**: Confluence for features (HTML format required), comprehensive inline documentation

##  DEFINITION OF DONE (Excellence Standards)
- [ ] JIRA story → In Progress with regular status updates
- [ ] All acceptance criteria implemented
- [ ] **Manual functionality verification completed** (immediately after implementation)
- [ ] **Kiwi-TCMS test cases created** (after manual verification)
- [ ] **Automated test cases implemented** (Unit, integration, E2E with >90% coverage)
- [ ] **ALL tests run locally and passing** before PR creation
- [ ] PR created with comprehensive description
- [ ] **3-Phase MCP Review COMPLETE**: describe → review → improve
- [ ] **ALL review feedback addressed**: Security, performance, maintainability issues fixed
- [ ] **CI/CD ALL GREEN**: 100% successful checks before merge
- [ ] **HUMAN-APPROVED MERGE**: AI agents prepare, humans execute merge
- [ ] **Confluence documentation updated** with technical details (HTML format required)
- [ ] **JIRA story → Done** (ONLY after merge complete)
- [ ] Production deployment verified

**Enterprise SDLC ensures quality, security, and maintainability with full MCP integration.**
