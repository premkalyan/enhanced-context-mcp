description: Testing strategy - Unit, E2E, integration with Allure reporting
globs:
alwaysApply: false

# Testing Strategy

## Test Types & Coverage
- **Unit:** Every component (>90% coverage)
- **Integration:** Page workflows, API validation
- **E2E:** Critical user journeys (Playwright + Allure)
- **Performance:** Load testing for critical paths

## GitHub Test Management

```bash
# Create test cases via GitHub CLI
gh issue create --template test-case-functional.yml
gh issue create --template test-case-integration.yml
gh issue create --template bug-report.yml
gh project create --title "Test Management"
```

**Test Case Template:**
```markdown
- **Feature:** [Feature name]
- **Scenario:** [Test scenario]
- **Steps:** 1. Action, 2. Action, 3. Verify
- **Expected:** [Expected result]
- **Labels:** test-case, functional/integration
```

## Unit Testing

```typescript
// Controller tests
describe('Controller - STORY-XX', () => {
  test('should have required functions', () => {
    expect(typeof controller.getAll).toBe('function');
    expect(typeof controller.create).toBe('function');
  });
});

// Service tests
describe('Service - STORY-XX', () => {
  test('should validate function signatures', () => {
    expect(service.create.length).toBe(3);
  });
});
```

**Mocking:**
- Database: Mock Prisma client
- External APIs: Mock HTTP requests
- Services: Mock dependencies
- File System: Mock operations

## E2E Testing (Playwright)

**Page Object Model:**
```typescript
export class AdminPage {
  readonly page: Page;
  readonly createBtn: Locator;
  
  constructor(page: Page) {
    this.page = page;
    this.createBtn = page.locator('[data-testid="create-btn"]');
  }
  
  async goto() {
    await this.page.goto('http://localhost:6600/admin');
    await this.page.waitForLoadState('networkidle');
  }
}
```

**Test Pattern:**
```typescript
import { test, expect } from '@playwright/test';
import { AdminPage } from '../pages/AdminPage';

test.describe('Feature - STORY-XX', () => {
  let adminPage: AdminPage;
  
  test.beforeEach(async ({ page }) => {
    adminPage = new AdminPage(page);
    await adminPage.goto();
  });
  
  test('should complete workflow', async ({ page }) => {
    await adminPage.clickCreate();
    await expect(page.locator('text=Success')).toBeVisible();
  });
});
```

**Test Categories:**
1. **Authentication:** Login, logout, password reset
2. **CRUD:** Create, read, update, delete operations
3. **Workflows:** Multi-step user journeys
4. **Error Handling:** Validation, error messages
5. **Permissions:** Role-based access
6. **Cross-browser:** Chrome, Firefox, Safari

## Integration Testing

```typescript
// API tests
describe('API Integration', () => {
  test('POST /api/resource', async () => {
    const response = await request.post('/api/resource')
      .send({ name: 'Test' })
      .expect(201);
    expect(response.body).toHaveProperty('id');
  });
});

// Database tests
describe('Database Integration', () => {
  test('should save to database', async () => {
    await service.create(data);
    const saved = await db.findOne(id);
    expect(saved.name).toBe(data.name);
  });
});
```

## Allure Reporting

```typescript
import allure from 'allure-playwright';

test('feature test', async ({ page }) => {
  await allure.epic('Organization Management');
  await allure.feature('Organization Creation');
  await allure.story('STORY-24');
  await allure.severity('critical');
  
  await allure.step('Navigate to admin', async () => {
    await page.goto('/admin');
  });
  
  await allure.step('Create organization', async () => {
    await page.click('[data-testid="create"]');
  });
  
  await allure.attachment('Screenshot', await page.screenshot(), 'image/png');
});
```

## Test Data Management

**Fixtures:**
```typescript
// fixtures/users.ts
export const testUsers = {
  admin: { email: 'admin@test.com', password: 'test123' },
  user: { email: 'user@test.com', password: 'test123' }
};
```

**Database Seeds:**
```typescript
// seeds/test-data.ts
export async function seedTestData() {
  await db.user.createMany({ data: testUsers });
  await db.organization.createMany({ data: testOrgs });
}
```

## CI/CD Integration

```yaml
# .github/workflows/tests.yml
name: Tests
on: [push, pull_request]
jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm ci
      - run: npm run test:unit
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/
  
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm ci
      - run: npx playwright install --with-deps
      - run: npm run test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
```

## Test Standards

**Coverage:**
- Unit: >90%
- Integration: All API endpoints
- E2E: All critical user paths

**Naming:**
- Test files: `FeatureName.test.ts`
- Test suites: `describe('Feature - STORY-XX')`
- Tests: `test('should do something')`

**Assertions:**
- Clear, specific expectations
- Meaningful error messages
- Test one thing per test

**Best Practices:**
- Arrange-Act-Assert pattern
- Independent tests (no shared state)
- Fast execution (<5min total)
- Deterministic (no flaky tests)
- Clean up after tests

## Debugging

**Playwright:**
```bash
npx playwright test --debug
npx playwright test --headed
npx playwright test --ui
npx playwright show-report
```

**Jest:**
```bash
npm test -- --watch
npm test -- --coverage
npm test -- --verbose
```

**Logs:**
```typescript
test('debug test', async ({ page }) => {
  await page.pause(); // Pause execution
  console.log('Current URL:', page.url());
  console.log('Page title:', await page.title());
});
```
