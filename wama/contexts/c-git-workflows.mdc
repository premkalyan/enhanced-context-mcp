description: Git Workflows - Branch management, commit standards, and squashing best practices
globs:
alwaysApply: false

# Git Workflows & Best Practices
# ================================

##  GIT WORKFLOW

### **Branch Naming Convention**
```bash
# Format: {type}/{PROJECT}-{number}-{description}
feature/PROJ-109-campaign-database-schema
bugfix/PROJ-106-design-system-integration
hotfix/PROJ-emergency-auth-fix
```

### **Commit Message Format**
```bash
# Format: {PROJECT}-{number}: {summary}
PROJ-24: Add organization editing form validation
PROJ-24: Implement activity panel close button
PROJ-24: Fix API response data extraction
```

### **Git Operations Guidelines**
- Use brief, essential messages only
- Reference JIRA story number in every commit
- Group related changes into logical commits
- Avoid commits with mixed concerns

##  COMMIT SQUASHING (Clean Git History)

### **Enterprise Standards for Commit Squashing**
```bash
# Interactive rebase to squash N commits
git rebase -i HEAD~N

# Squash all feature commits into logical units
git rebase -i main

# Guidelines:
#   - 1 commit per logical feature/fix
#   - Clear commit message with P360-{number}: format
#   - Preserve meaningful commit history
```

### **Squashing Best Practices**
- **Before Squashing**: Ensure ALL PR feedback is incorporated
- **During Squashing**: Group related commits into logical units
- **After Squashing**: Verify commit message clarity and JIRA reference
- **Clean History**: Each commit should represent a complete, logical change

### **Squashing Methods**

#### **Method 1: Interactive Rebase (Manual)**
```bash
# Start interactive rebase
git rebase -i HEAD~5  # Last 5 commits

# In editor, change 'pick' to 'squash' for commits to combine
pick a1b2c3d P360V2-24: Add organization form
squash e4f5g6h P360V2-24: Fix form validation
squash i7j8k9l P360V2-24: Add form tests

# Save and edit commit message
P360V2-24: Implement organization editing form with validation and tests
```

#### **Method 2: Soft Reset (Alternative)**
```bash
# Reset to main but keep changes staged
git reset --soft main

# Create single commit with all changes
git commit -m "PROJ-24: Complete organization editing feature implementation"
```

#### **Method 3: GitHub CLI Squash Merge (Automated)**
```bash
# Squash and merge in one command
gh pr merge --squash --delete-branch

# Automatically creates clean commit on main
# Format: "P360V2-24: {PR Title} (#34)"
```

##  GIT WORKFLOW STAGES

### **Development Workflow**
```bash
# 1. Create feature branch
git checkout -b feature/P360V2-24-organization-editing

# 2. Regular development commits
git commit -m "P360V2-24: Add organization controller"
git commit -m "P360V2-24: Implement form validation"
git commit -m "P360V2-24: Add unit tests"

# 3. Push for backup/collaboration
git push origin feature/P360V2-24-organization-editing

# 4. Continue development...
git commit -m "P360V2-24: Fix PR review feedback"
git commit -m "P360V2-24: Update documentation"
```

### **Pre-Merge Squashing**
```bash
# 5. After ALL PR feedback is incorporated
git rebase -i main  # Squash development commits

# 6. Result: Clean logical commits
P360V2-24: Implement organization editing backend API
P360V2-24: Add organization editing frontend UI
P360V2-24: Implement comprehensive test coverage
```

### **Merge Process**
```bash
# 7. Final merge (HUMAN ONLY)
gh pr merge --squash

# 8. Clean up
git branch -d feature/P360V2-24-organization-editing
```

##  CRITICAL SQUASHING RULES

### ** NEVER DO THIS:**
- Squash commits before ALL PR feedback is incorporated
- Squash commits that break logical separation
- Create commits without JIRA story references
- Merge without proper commit squashing

### ** ALWAYS DO THIS:**
- Wait until ready for merge before squashing
- Squash commits into logical units before merge
- Preserve meaningful commit history
- Use clear commit messages with JIRA references

##  AUTOMATED SQUASHING OPTIONS

### **GitHub CLI Integration**
```bash
# Option 1: Squash merge with branch deletion
gh pr merge --squash --delete-branch

# Option 2: Squash merge with custom message
gh pr merge --squash --subject "P360V2-24: Organization editing complete"

# Option 3: Check squash compatibility
gh pr view --json mergeable,mergeStateStatus
```

### **GitHub Web UI**
- Use "Squash and merge" button
- Edit commit message for clarity
- Ensure JIRA story reference included

### **Git Command Line**
```bash
# Manual squash merge
git checkout main
git merge --squash feature/P360V2-24-organization-editing
git commit -m "P360V2-24: Complete organization editing feature"
```

##  BRANCH MANAGEMENT

### **Branch Lifecycle**
1. **Create**: `git checkout -b feature/P360V2-{number}-{description}`
2. **Develop**: Regular commits with story references
3. **Push**: Backup and collaboration
4. **Review**: PR creation and review process
5. **Squash**: Clean commit history before merge
6. **Merge**: Human-approved squash merge
7. **Cleanup**: Delete feature branch

### **Branch Protection Rules**
- **main**: Protected, requires PR review
- **feature/***: Development branches, regular pushes allowed
- **hotfix/***: Emergency fixes, expedited review process

##  GIT QUALITY GATES

### **Pre-Commit Validation**
- [ ] **JIRA Reference**: Commit message includes story number
- [ ] **Logical Grouping**: Related changes in same commit
- [ ] **Message Clarity**: Descriptive and concise commit message

### **Pre-Merge Validation**
- [ ] **Clean History**: Commits squashed into logical units
- [ ] **Branch Updated**: Latest main merged into feature branch
- [ ] **Tests Passing**: All CI/CD checks green
- [ ] **Review Complete**: All PR feedback addressed

### **Post-Merge Validation**
- [ ] **Branch Cleanup**: Feature branch deleted
- [ ] **main Updated**: Latest changes pulled locally
- [ ] **Documentation**: Git history clean and navigable

**Git workflows ensure clean, traceable, and enterprise-grade version control for P360 development.**
