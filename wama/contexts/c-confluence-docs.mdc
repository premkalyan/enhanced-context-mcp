description: Confluence Documentation Standards - Formatting, best practices, and MCP tools
globs:
alwaysApply: false

# Confluence Documentation Standards
# ===================================

##  MCP CONFLUENCE TOOLS (Essential Commands)
```typescript
// Documentation (Confluence uses HTML, NOT Markdown)
mcp_confluence-mcp_confluence_create_page  // Create docs (use HTML: <h1>, <h2>, <strong>, <ul>, <li>)
mcp_confluence-mcp_confluence_update_page  // Update docs (use HTML formatting)
mcp_confluence-mcp_confluence_search       // Find existing docs
mcp_confluence-mcp_confluence_get_spaces   // List spaces
mcp_confluence-mcp_confluence_get_page     // Get page details
mcp_confluence-mcp_confluence_upload_document  // Upload attachments
```

##  CONFLUENCE FORMATTING REQUIREMENTS

### ** CRITICAL: Confluence uses HTML, NOT Markdown**

### ** Correct Confluence HTML Syntax:**
```html
<h1>Main Title</h1>
<h2>Section Header</h2>
<h3>Subsection</h3>
<p><strong>Bold Text</strong></p>
<p><em>Italic Text</em></p>
<ul>
  <li>Bullet point</li>
  <li>Another point</li>
</ul>
<ol>
  <li>Numbered item</li>
  <li>Next item</li>
</ol>
<p><a href="URL">Link Text</a></p>
<pre><code>Code block content</code></pre>
```

** CRITICAL:** Confluence uses HTML, NOT Markdown.
**See confluence-page template for complete formatting reference.**

##  DOCUMENTATION STANDARDS

### **Technical Documentation Structure**
```html
<h1>Feature Name: Brief Description</h1>

<h2>Overview</h2>
<p>Brief feature description and business value</p>

<h2>Feature Scope</h2>
<h3> Implemented Features</h3>
<ul>
  <li><strong>Feature 1</strong> - Description</li>
  <li><strong>Feature 2</strong> - Description</li>
</ul>

<h2>Technical Architecture</h2>
<h3>Frontend Components</h3>
<ul>
  <li><strong>Component.tsx</strong> - Purpose and functionality</li>
</ul>

<h3>Backend Services</h3>
<ul>
  <li><strong>service.js</strong> - Business logic description</li>
</ul>

<h2>API Endpoints</h2>
<h3>GET /api/resource</h3>
<p><strong>Purpose:</strong> Description</p>
<pre><code>Request/Response examples</code></pre>

<h2>Testing Strategy</h2>
<h3>Unit Tests</h3>
<h3>E2E Tests</h3>
<h3>Integration Tests</h3>

<h2>Security Implementation</h2>

<h2>SDLC Process Followed</h2>
<p>Complete 17-step process documentation</p>

<h2>Deployment Status</h2>
<ul>
  <li><strong>Development:</strong>  Status</li>
  <li><strong>Production Ready:</strong>  Status</li>
</ul>
```

##  VISUAL DOCUMENTATION STANDARDS

### **Enhanced Visual Documentation (from memories)**
1. **Mermaid Diagrams** - System architecture, workflow processes, database relationships embedded directly in Confluence pages
2. **Diagrams by Mingrammer** - Infrastructure architecture diagrams generated as SVG/PNG and embedded
3. **Visual Requirements** - All technical architecture documentation must include visual representations
4. **Confluence Integration** - Support both inline Mermaid syntax and uploaded diagram images

### **Mermaid Diagram Examples**
```html
<h3>System Architecture</h3>
<pre><code class="language-mermaid">
graph LR
    A[Frontend] --> B[Backend API]
    B --> C[Database]
    B --> D[Redis Cache]
</code></pre>

<h3>Workflow Process</h3>
<pre><code class="language-mermaid">
sequenceDiagram
    User->>Frontend: Create Organization
    Frontend->>Backend: POST /api/organizations
    Backend->>Database: Save Organization
    Database-->>Backend: Success
    Backend-->>Frontend: Organization Created
</code></pre>
```

### **Image Embedding**
```html
<h3>Architecture Diagram</h3>
<p><img src="/path/to/diagram.png" alt="System Architecture" width="800" /></p>
```

##  HYBRID LOCAL + REMOTE DOCUMENTATION APPROACH

### **Local Content Structure:**
```bash
PROJECT-NAME/
 confluence/                    #  All Confluence content locally
    spaces/                   # Space structure preserved
    pages/                    # Individual page content (HTML format)
    attachments/              # Diagrams, images, documents
 docs/                         #  Generated documentation
```

### **Documentation Workflow:**
1. **Create locally first** - Fast development and iteration
2. **Sync to Confluence** - Keep external systems updated
3. **Version control** - Everything tracked in Git
4. **Review process** - Documentation reviews as part of PR

##  DOCUMENTATION CHECKLIST

### **For Each Feature:**
- [ ] **Feature Overview** - Business value and scope
- [ ] **Technical Architecture** - Components and services
- [ ] **API Documentation** - All endpoints with examples
- [ ] **Testing Coverage** - Unit, integration, E2E strategies
- [ ] **Security Details** - Authentication and authorization
- [ ] **SDLC Process** - Complete development cycle
- [ ] **Visual Diagrams** - Architecture and workflow diagrams
- [ ] **Deployment Status** - Production readiness

### **Quality Standards:**
- [ ] **HTML Formatting** - Proper Confluence syntax
- [ ] **Visual Elements** - Diagrams and screenshots included
- [ ] **Code Examples** - Practical implementation samples
- [ ] **Clear Structure** - Logical organization and navigation
- [ ] **Cross-References** - Links to related documentation

##  CONFLUENCE MCP INTEGRATION

### **Page Creation Process**
1. **Detect space context** - Use project space by default
2. **Load page template** - Standard feature documentation structure
3. **Insert content** - HTML-formatted technical details
4. **Upload attachments** - Diagrams and supporting files
5. **Cross-link pages** - Connect related documentation

### **Content Management**
- **Version Control** - Track changes in Git and Confluence
- **Review Process** - Documentation reviews in PR process
- **Update Triggers** - Auto-update when code changes
- **Search Optimization** - Tags and labels for discoverability

**Confluence Documentation ensures comprehensive technical knowledge capture with visual excellence.**
