description: P360 PR Review Process - Enhanced 3-step MCP review workflow and standards
globs:
alwaysApply: false

# P360 PR Review Process
# ======================

##  MCP PR TOOLS (Essential Commands)
```typescript
// PR Management (Agent-Driven) - COMPLETE PROCESS REQUIRED
gh pr create --title "..." --body "..." --base main  // Create PR via CLI
// OR: ./scripts/create-pr.sh  // Enterprise script with all quality gates

//  CRITICAL GATE: WAIT FOR ALL GITHUB ACTIONS TO PASS FIRST
// DO NOT RUN MCP TOOLS UNTIL ALL CI/CD CHECKS ARE GREEN!

// OPTION 1: Enhanced 3-Step PR Review Process (RECOMMENDED) - AFTER CI/CD PASSES
// STEP 1: mcp_pr-agent-mcp_pr_describe    // Documentation (ONLY after Actions pass)
// STEP 2: mcp_pr-agent-mcp_pr_review      // Quality assessment + agent implements fixes
// STEP 3: mcp_pr-agent-mcp_pr_improve     // Inline suggestions for human review

// OPTION 2: Manual Individual Tools (Legacy) - AFTER CI/CD PASSES
// PHASE 1: mcp_pr-agent-mcp_pr_describe              // Documentation (ONLY after Actions pass)
// PHASE 2: mcp_pr-agent-mcp_pr_review                // Quality assessment
// PHASE 3: mcp_pr-agent-mcp_pr_improve               // Improvements

//  CRITICAL: NEVER waste time on MCP review until ALL GitHub Actions are GREEN
//  AI AGENTS NEVER MERGE - HUMAN ONLY ACTION
```

##  ENHANCED 3-STEP PR REVIEW WORKFLOW (MCP-Driven)

### ** CRITICAL SEQUENCING REQUIREMENT**
```
 WRONG:  PR Creation → MCP Review → GitHub Actions
 RIGHT:  PR Creation → GitHub Actions Pass → MCP Review
```

**Why this sequence matters:**
- **Time Efficiency**: Don't waste human/AI review time on code that fails basic checks
- **Quality First**: Automated checks (lint, tests, security) catch obvious issues quickly
- **Focus**: Human/AI review should focus on architecture, logic, maintainability - not basic syntax
- **Cost Optimization**: Expensive AI review time reserved for quality code that passes CI/CD

### ** Usage:**
```bash
#  PREREQUISITE: ALL GitHub Actions must pass first
# DO NOT proceed until CI/CD checks are GREEN!

# Enhanced 3-step review process (ONLY after GitHub Actions pass)
# STEP 1: pr_describe (automated documentation)
# STEP 2: pr_review + agent implements obvious fixes
# STEP 3: pr_improve + human reviews inline suggestions
```

### ** Enhanced 3-Step Process:**

#### ** PREREQUISITE: GitHub Actions Gate** → (MANDATORY)
- **ALL GitHub Actions must be GREEN  before proceeding**
- Check PR status: lint , tests , security , build
- **NEVER proceed with MCP review on failing CI/CD**
- **Time-saving principle**: Fix automated issues before human/AI review

#### **STEP 1: PR Describe**  (Automated - ONLY after GitHub Actions pass)
- Document what the PR changes do
- Generate comprehensive PR description
- Identify affected systems and components

#### **STEP 2: PR Review + Agent Implementation**  (Automated)
- AI-powered quality assessment
- Security, performance, maintainability analysis
- **Agent immediately implements obvious fixes**
- **Agent commits fixes with descriptive messages**
- Code quality scoring and feedback

#### **STEP 3: PR Improve + Human Review** → (Collaborative)
- **Agent**: Generate actionable improvement suggestions
- **Agent**: Create inline suggestions with "Commit suggestion" buttons
- **Agent**: Rank suggestions by importance (1-10)
- **Human**: Review inline suggestions and click "Commit suggestion" for approved changes
- **Human**: Bulk efficiency - multiple fixes in one review cycle

### **Human Assessment Criteria:**
- Security Impact (Critical → Commit immediately)
- Performance Impact (High → Commit if appropriate)
- Code Quality (Medium → Commit if beneficial)
- Documentation (Low → Commit or defer to future PR)
- Style/Formatting (Usually auto-commit)

##  ITERATIVE FEEDBACK INTEGRATION

### **Key Enhancement**: After initial MCP review, incorporate feedback and run `pr_improve` again
- **Cycle 1**: Initial review → feedback incorporation
- **Cycle 2**: Iterative improvement → inline comments → final fixes
- **Result**: Higher quality code with multiple refinement passes

##  AUTOMATION STRATEGY

### **GitHub API Limitation**: Cannot programmatically resolve PR conversations
### **Enterprise Solution**: Documentation-based resolution with audit trail
-  **All issues MUST be fixed in code**
-  **All fixes MUST be documented with commit references**
-  **Manual "Resolve conversation" clicks are OPTIONAL for SDLC compliance**

##  P360-Specific Review Focus

### **Example review focus areas for P360 enterprise features:**
```typescript
"How does this Prisma schema change affect existing campaign data migration?"
"Why was this database indexing strategy chosen for multi-tenant performance?"
"How does this component integrate with the existing Figma design system tokens?"
"What is the performance impact of this change on large campaign datasets?"
"How does this authentication change maintain backward compatibility?"
"What testing strategy covers the multi-environment deployment (dev/UAT/QA)?"
```

##  DISABLED FOR NOW: CodeQL Security Remediation
- **Future Reference**: `mcp_codeql_security_scan` + `mcp_remediate_security_findings`
- **Reason**: Streamlining current workflow, will add back when process is mature
- **Plan**: Re-enable after 3-step process is proven efficient

##  PR CREATION STANDARDS

### **PR Title Format**
```
P360V2-{number}: {Brief Description}
```

### **PR Description Template**
```markdown
## JIRA Story
- **Story**: P360V2-{number}
- **Title**: {Story Title}
- **Epic**: {Epic Name}

## Changes Made
- [ ] **Feature 1**: Description
- [ ] **Feature 2**: Description

## Testing
- [ ] **Unit Tests**: {X} tests passing
- [ ] **E2E Tests**: {Y} scenarios validated
- [ ] **Manual Testing**: Feature verification complete

## Quality Checks
- [ ] **Linting**: ESLint + Prettier passing
- [ ] **Type Safety**: TypeScript validation clean
- [ ] **Security**: No vulnerabilities detected

## SDLC Compliance
- [ ] **Local Tests**: All tests run and passing
- [ ] **Manual Verification**: End-to-end functionality confirmed
- [ ] **Documentation**: Confluence pages updated
```

##  PR REVIEW CHECKLIST

### **Code Quality**
- [ ] **Clean Code**: Readable, maintainable implementation
- [ ] **Architecture**: Follows P360 patterns and standards
- [ ] **Performance**: Optimized for P360 scale requirements
- [ ] **Security**: No vulnerabilities or sensitive data exposure
- [ ] **Testing**: Comprehensive test coverage

### **P360 Standards**
- [ ] **Database**: Proper Prisma usage and migrations
- [ ] **API**: RESTful design with error handling
- [ ] **Frontend**: Component architecture and TypeScript
- [ ] **Environment**: Multi-tier compatibility (dev/UAT/QA)
- [ ] **Documentation**: Inline and Confluence updates

### **SDLC Compliance**
- [ ] **Story Scope**: Implements only story requirements
- [ ] **Testing Strategy**: Unit + E2E + integration coverage
- [ ] **Git Standards**: Clean commits and branch naming
- [ ] **Review Process**: All 3 MCP steps completed

##  MCP FAILURE BLOCKING RULES

### **PR Agent MCP Failures**: Block code review, merge approval, deployment
### **Success Validation Checklist**
- [ ] PR comments/reviews successfully posted
- [ ] All review feedback documented
- [ ] Inline suggestions created and tracked

**Enhanced 3-Step PR Review ensures enterprise-grade code quality with human-AI collaboration.**
