description: P360 JIRA Management - Story workflows, transitions, and commenting standards
globs:
alwaysApply: false

# P360 JIRA Management
# ===================

##  MCP JIRA TOOLS (Essential Commands)
```typescript
// JIRA Management (Use plain text formatting: UPPERCASE, -,  emojis)
mcp_jira-orengrinker_search_issues         // Find stories
mcp_jira-orengrinker_get_issue_details     // Get requirements
mcp_jira-orengrinker_transition_issue      // Update status
mcp_jira-orengrinker_add_comment          // Progress updates (plain text)
mcp_jira-orengrinker_create_issue         // Create new stories
mcp_jira-orengrinker_update_issue         // Update story details
mcp_jira-orengrinker_get_projects         // List projects
mcp_jira-orengrinker_get_current_user     // Get user info
```

##  JIRA STORY MANAGEMENT

### **Story Context Framework**
```markdown
## Story Context
- **Epic**: P360V2-A2 (Organization Management)
- **Story Scope**: Organization Editing ONLY
- **Related Stories**:
  - P360V2-22: Organization Creation
  - P360V2-23: Organization Display
  - P360V2-24: Organization Editing  (CURRENT)
  - P360V2-25: Organization Deletion (PENDING)
  - P360V2-26: Organization Bulk Operations (PENDING)

## Acceptance Criteria
- ONLY implement editing functionality
- Do NOT implement creation/deletion (separate stories)
- Reference existing creation/display patterns
```

### **Story Transitions & Status Updates**
- **To Do** → **In Progress**: Start development work
- **In Progress** → **Code Review**: After PR creation
- **Code Review** → **Testing**: After PR approval
- **Testing** → **Done**: After merge and documentation

### **Regular Progress Comments**
Use plain text formatting in JIRA comments:
```
PROGRESS UPDATE (use UPPERCASE for emphasis)

 COMPLETED:
- Backend API implementation
- Frontend form validation
- Unit test coverage

 IN PROGRESS:
- E2E test implementation
- PR review process

 NEXT STEPS:
- Address PR feedback
- Complete documentation
- Manual verification
```

##  MCP CALL TESTING & FAILURE BLOCKING

### ** MANDATORY MCP RESPONSE VALIDATION**
ALL MCP tool calls MUST be tested and validated before proceeding:

```typescript
// MCP Call Testing Protocol
1. **Response Validation**: Every MCP call must return expected data structure
2. **Error Handling**: Failed MCP calls must block the development journey
3. **Retry Logic**: Maximum 3 retry attempts for transient failures
4. **Fallback Strategy**: No fallbacks allowed for critical MCP operations
5. **Status Verification**: All JIRA/PR/Confluence operations must confirm success

// Example MCP Validation Pattern
const mcpResult = await mcp_jira_get_issue_details({issueKey: "P360V2-123"});
if (!mcpResult || !mcpResult.fields) {
  throw new Error(" MCP Call Failed - Blocking SDLC Journey");
}
```

### ** FAILURE BLOCKING RULES**
- **JIRA MCP Failures**: Block story progression, PR creation, testing
- **Status Verification**: All JIRA story status correctly updated
- **Comment Validation**: All progress comments successfully posted

### ** SUCCESS VALIDATION CHECKLIST**
- [ ] MCP response structure matches expected schema
- [ ] All required fields present in response
- [ ] HTTP status codes indicate success (200, 201, 204)
- [ ] JIRA story status correctly updated
- [ ] Comments posted with proper formatting

### ** RETRY & RECOVERY STRATEGY**
```typescript
// MCP Retry Pattern
let attempts = 0;
const maxAttempts = 3;

while (attempts < maxAttempts) {
  try {
    const result = await mcpCall();
    if (validateMCPResponse(result)) {
      break; // Success - continue journey
    }
  } catch (error) {
    attempts++;
    if (attempts === maxAttempts) {
      throw new Error(` MCP Failed after ${maxAttempts} attempts - BLOCKING`);
    }
    await sleep(1000 * attempts); // Exponential backoff
  }
}
```

##  JIRA FORMATTING REQUIREMENTS

### ** JIRA Comments - Plain Text Only:**
```
MAIN TITLE (use UPPERCASE for emphasis)
Section Header (use simple structure)
- Bullet points with dashes
- Another bullet point
 Checkmarks for completed items
 Emojis for status indicators
 Visual separators with emojis
```

### ** Wrong (Markdown displays literally in JIRA):**
```markdown
# Title          → displays as: # Title
## Header        → displays as: ## Header
**Bold**         → displays as: **Bold**
- List item      → displays as: - List item
```

### ** Correct JIRA Plain Text:**
```
TITLE (UPPERCASE)    → Clear visual hierarchy
Section Header       → Simple text structure
- List item          → Dash bullets
 Completed         → Emoji indicators
```

##  STORY SCOPE MANAGEMENT

### **Preventing Scope Creep**
- **Read Story Description**: Understand EXACT scope before starting
- **Check Related Stories**: Reference other stories in the EPIC
- **Validate Acceptance Criteria**: Implement ONLY what's specified
- **Epic Context**: Understand how this story fits in larger feature set

### **Story Boundaries**
- **Organization Creation**: P360V2-22 (separate story)
- **Organization Editing**: P360V2-24 (current story scope)
- **Organization Deletion**: P360V2-25 (separate story)
- **Bulk Operations**: P360V2-26 (separate story)

** P360-V2 Enterprise MCP Quality Gate: Zero tolerance for MCP failures in production SDLC**

**JIRA Management ensures proper story tracking and scope control throughout P360 SDLC.**
