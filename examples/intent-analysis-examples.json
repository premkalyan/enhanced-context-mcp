{
  "version": "1.0.0",
  "description": "Real-world examples of intent analysis for Enhanced Context MCP",
  "examples": [
    {
      "id": "arch-diagram-microservices",
      "category": "Architecture Diagrams",
      "input": {
        "task_statement": "Create a system architecture diagram for our microservices platform showing API gateway, auth service, and payment processing"
      },
      "expected_output": {
        "query_type": "architecture-diagrams",
        "task_intent": "create",
        "complexity": "complex",
        "domain_focus": ["security", "payments", "api"],
        "confidence": 0.92,
        "reasoning": [
          "Detected query type: architecture-diagrams (confidence: 0.95)",
          "Detected task intent: create (confidence: 0.8)",
          "Detected complexity: complex (confidence: 0.8)",
          "Detected domain focus: security, payments, api"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-architecture-generation"
      ],
      "loaded_templates": [
        "architecture-diagrams-mermaid"
      ]
    },
    {
      "id": "user-stories-payment",
      "category": "User Stories",
      "input": {
        "task_statement": "Help me write user stories for a new payment checkout feature with credit card processing"
      },
      "expected_output": {
        "query_type": "story",
        "task_intent": "create",
        "scope": "story",
        "complexity": "critical",
        "domain_focus": ["payments"],
        "confidence": 0.88,
        "reasoning": [
          "Detected query type: story (confidence: 0.90)",
          "Detected task intent: create (confidence: 0.8)",
          "Detected scope: story (confidence: 0.7)",
          "Detected complexity: critical (confidence: 0.9)",
          "Detected domain focus: payments"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-story-writing"
      ],
      "loaded_templates": [
        "user-story"
      ]
    },
    {
      "id": "security-review-gdpr",
      "category": "Security Review",
      "input": {
        "task_statement": "Review the security of our authentication system to ensure it's compliant with GDPR"
      },
      "expected_output": {
        "query_type": "security",
        "task_intent": "review",
        "complexity": "critical",
        "domain_focus": ["security", "compliance"],
        "confidence": 0.91,
        "reasoning": [
          "Detected query type: security (confidence: 0.95)",
          "Detected task intent: review (confidence: 0.8)",
          "Detected complexity: critical (confidence: 0.9)",
          "Detected domain focus: security, compliance"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-security-review",
        "c-compliance"
      ],
      "loaded_templates": [
        "security-checklist"
      ]
    },
    {
      "id": "epic-breakdown",
      "category": "Story Breakdown",
      "input": {
        "task_statement": "Break down the user management epic into smaller stories and tasks"
      },
      "expected_output": {
        "query_type": "story-breakdown",
        "task_intent": "breakdown",
        "scope": "epic",
        "confidence": 0.87,
        "reasoning": [
          "Detected query type: story-breakdown (confidence: 0.90)",
          "Detected task intent: breakdown (confidence: 0.8)",
          "Detected scope: epic (confidence: 0.7)"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-story-breakdown"
      ],
      "loaded_templates": [
        "story-breakdown"
      ]
    },
    {
      "id": "terraform-aws-kubernetes",
      "category": "Infrastructure",
      "input": {
        "task_statement": "Help me plan the Terraform infrastructure for deploying our app to AWS with Kubernetes"
      },
      "expected_output": {
        "query_type": "infrastructure",
        "task_intent": "plan",
        "complexity": "complex",
        "domain_focus": ["infrastructure"],
        "confidence": 0.93,
        "reasoning": [
          "Detected query type: infrastructure (confidence: 0.95)",
          "Detected task intent: plan (confidence: 0.8)",
          "Detected complexity: complex (confidence: 0.8)",
          "Detected domain focus: infrastructure"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-infrastructure-as-code",
        "c-cloud-data-engineering"
      ],
      "loaded_templates": [
        "infrastructure-plan"
      ]
    },
    {
      "id": "api-docs-confluence",
      "category": "Documentation",
      "input": {
        "task_statement": "Write API documentation for our REST endpoints in Confluence"
      },
      "expected_output": {
        "query_type": "documentation",
        "task_intent": "create",
        "output_format": "confluence",
        "domain_focus": ["api"],
        "confidence": 0.86,
        "reasoning": [
          "Detected query type: documentation (confidence: 0.90)",
          "Detected task intent: create (confidence: 0.8)",
          "Detected output format: confluence",
          "Detected domain focus: api"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-confluence-docs"
      ],
      "loaded_templates": [
        "api-documentation"
      ]
    },
    {
      "id": "test-plan-playwright",
      "category": "Testing",
      "input": {
        "task_statement": "Create a comprehensive test plan for our e2e browser automation tests using Playwright"
      },
      "expected_output": {
        "query_type": "browser-testing",
        "task_intent": "create",
        "complexity": "medium",
        "domain_focus": ["performance"],
        "confidence": 0.84,
        "reasoning": [
          "Detected query type: browser-testing (confidence: 0.90)",
          "Detected task intent: create (confidence: 0.8)",
          "Detected complexity: medium (inferred)",
          "Detected domain focus: performance"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-browser-testing"
      ],
      "loaded_templates": [
        "test-plan"
      ]
    },
    {
      "id": "mermaid-mcp-system",
      "category": "Architecture Diagrams",
      "input": {
        "task_statement": "I want to create a mermaid diagram showing our MCP server system with all the services and connections"
      },
      "expected_output": {
        "query_type": "architecture-diagrams",
        "task_intent": "create",
        "scope": "epic",
        "confidence": 0.90,
        "reasoning": [
          "Detected query type: architecture-diagrams (confidence: 0.95)",
          "Detected task intent: create (confidence: 0.8)"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-architecture-generation"
      ],
      "loaded_templates": [
        "architecture-diagrams-mermaid"
      ]
    },
    {
      "id": "pr-review-security",
      "category": "PR Review",
      "input": {
        "task_statement": "Review pull request #123 for security vulnerabilities and code quality issues"
      },
      "expected_output": {
        "query_type": "pr-review",
        "task_intent": "review",
        "domain_focus": ["security"],
        "confidence": 0.88,
        "reasoning": [
          "Detected query type: pr-review (confidence: 0.90)",
          "Detected task intent: review (confidence: 0.8)",
          "Detected domain focus: security"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-pr-review"
      ],
      "loaded_templates": [
        "pr-review-checklist"
      ]
    },
    {
      "id": "complex-ecommerce",
      "category": "Complex Architecture",
      "input": {
        "task_statement": "I need to create a comprehensive architecture for an e-commerce platform with payment processing, inventory management, user authentication, and order tracking. It needs to handle 100,000 concurrent users and be PCI compliant."
      },
      "expected_output": {
        "query_type": "architecture",
        "task_intent": "create",
        "complexity": "critical",
        "domain_focus": ["payments", "security", "compliance", "performance"],
        "confidence": 0.94,
        "reasoning": [
          "Detected query type: architecture (confidence: 0.95)",
          "Detected task intent: create (confidence: 0.8)",
          "Detected complexity: critical (confidence: 0.9)",
          "Detected domain focus: payments, security, compliance, performance"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-architecture-generation",
        "c-security-review",
        "c-cloud-data-engineering"
      ],
      "loaded_templates": [
        "architecture-diagrams-mermaid",
        "security-checklist"
      ]
    },
    {
      "id": "simple-crud-api",
      "category": "Simple Implementation",
      "input": {
        "task_statement": "Create simple CRUD API for managing tasks"
      },
      "expected_output": {
        "query_type": "story",
        "task_intent": "create",
        "complexity": "simple",
        "domain_focus": ["api"],
        "confidence": 0.75,
        "reasoning": [
          "Detected task intent: create (confidence: 0.8)",
          "Detected complexity: simple (confidence: 0.7)",
          "Detected domain focus: api",
          "Inferred query type from context: story"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-story-writing"
      ],
      "loaded_templates": [
        "user-story"
      ]
    },
    {
      "id": "refine-performance",
      "category": "Optimization",
      "input": {
        "task_statement": "Optimize our database queries to improve API response time and reduce latency"
      },
      "expected_output": {
        "query_type": "story",
        "task_intent": "refine",
        "domain_focus": ["performance", "data", "api"],
        "confidence": 0.82,
        "reasoning": [
          "Detected task intent: refine (confidence: 0.8)",
          "Detected domain focus: performance, data, api",
          "Inferred query type from context: story"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-performance-optimization"
      ],
      "loaded_templates": [
        "optimization-plan"
      ]
    },
    {
      "id": "spike-poc",
      "category": "Research",
      "input": {
        "task_statement": "Research spike for proof of concept: Can we integrate OpenAI API with our existing authentication system?"
      },
      "expected_output": {
        "query_type": "story",
        "task_intent": "plan",
        "scope": "spike",
        "domain_focus": ["security", "api"],
        "confidence": 0.80,
        "reasoning": [
          "Detected task intent: plan (confidence: 0.8)",
          "Detected scope: spike (confidence: 0.7)",
          "Detected domain focus: security, api",
          "Inferred query type from context: story"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-story-writing"
      ],
      "loaded_templates": [
        "spike-template"
      ]
    },
    {
      "id": "flow-diagram-checkout",
      "category": "Flow Diagrams",
      "input": {
        "task_statement": "Visualize the user journey for checkout process from cart to payment confirmation"
      },
      "expected_output": {
        "query_type": "flow-diagrams",
        "task_intent": "create",
        "domain_focus": ["payments"],
        "confidence": 0.87,
        "reasoning": [
          "Detected query type: flow-diagrams (confidence: 0.90)",
          "Detected task intent: create (confidence: 0.8)",
          "Detected domain focus: payments"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-flow-diagrams"
      ],
      "loaded_templates": [
        "flow-diagram-mermaid"
      ]
    },
    {
      "id": "multi-domain-backend",
      "category": "Complex Multi-Domain",
      "input": {
        "task_statement": "Design a secure backend API with React frontend, PostgreSQL database, Redis caching, and AWS deployment - needs to handle authentication, rate limiting, and GDPR compliance"
      },
      "expected_output": {
        "query_type": "architecture",
        "task_intent": "plan",
        "complexity": "critical",
        "domain_focus": ["security", "compliance", "performance", "frontend", "backend", "data", "infrastructure"],
        "confidence": 0.95,
        "reasoning": [
          "Detected query type: architecture (confidence: 0.95)",
          "Detected task intent: plan (confidence: 0.8)",
          "Detected complexity: critical (confidence: 0.9)",
          "Detected domain focus: security, compliance, performance, frontend, backend, data, infrastructure"
        ]
      },
      "loaded_contexts": [
        "c-core-sdlc",
        "c-architecture-generation",
        "c-security-review",
        "c-cloud-data-engineering"
      ],
      "loaded_templates": [
        "architecture-diagrams-mermaid",
        "security-checklist",
        "infrastructure-plan"
      ]
    }
  ],
  "pattern_reference": {
    "query_types": {
      "story": ["create story", "write epic", "user story", "backlog"],
      "architecture-diagrams": ["diagram", "mermaid", "visualize", "architecture diagram"],
      "testing": ["test", "test plan", "qa", "unit test", "e2e"],
      "security": ["security", "audit", "vulnerability", "authentication"],
      "documentation": ["documentation", "doc", "confluence", "readme"],
      "infrastructure": ["terraform", "kubernetes", "cloud", "aws", "deployment"],
      "story-breakdown": ["break down", "split epic", "decompose"],
      "pr-review": ["pull request", "pr", "code review"]
    },
    "task_intents": {
      "create": ["create", "write", "build", "generate", "develop"],
      "review": ["review", "audit", "check", "examine"],
      "breakdown": ["break down", "split", "decompose", "divide"],
      "plan": ["plan", "design", "architect", "how to"],
      "refine": ["improve", "enhance", "optimize", "refactor"],
      "implement": ["implement", "code", "develop"]
    },
    "complexity_indicators": {
      "simple": ["simple", "basic", "straightforward", "quick"],
      "medium": ["medium", "moderate", "standard"],
      "complex": ["complex", "advanced", "microservices", "distributed"],
      "critical": ["critical", "security", "payment", "compliance"]
    },
    "domain_keywords": {
      "security": ["security", "authentication", "authorization", "encryption"],
      "payments": ["payment", "pci", "transaction", "billing"],
      "compliance": ["compliance", "gdpr", "hipaa", "soc2"],
      "performance": ["performance", "optimization", "scale", "latency"],
      "api": ["api", "rest", "graphql", "endpoint"],
      "frontend": ["frontend", "ui", "react", "vue"],
      "backend": ["backend", "server", "node", "python"],
      "infrastructure": ["infrastructure", "kubernetes", "docker", "terraform"],
      "data": ["data", "database", "etl", "pipeline"]
    }
  },
  "usage_tips": [
    "Be specific about actions: 'Create user stories' not 'User stuff'",
    "Mention key technologies: 'Terraform infrastructure for Kubernetes on AWS'",
    "Include domain keywords: 'Security review with GDPR compliance'",
    "Specify output destination: 'Write documentation in Confluence'",
    "Indicate complexity when relevant: 'Simple CRUD' or 'Complex microservices'"
  ],
  "confidence_thresholds": {
    "high": ">= 0.85 - Proceed with confidence",
    "medium": "0.70 - 0.84 - Good analysis, may need minor clarification",
    "low": "0.50 - 0.69 - Consider refining task statement",
    "very_low": "< 0.50 - Task statement too vague, needs clarification"
  }
}
