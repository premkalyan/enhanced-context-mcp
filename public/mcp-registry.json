{
  "version": "1.3.2",
  "lastUpdated": "2025-10-26T02:00:00.000Z",
  "mcpServers": {
    "project-registry": {
      "name": "Project Registry",
      "url": "https://project-registry-henna.vercel.app",
      "description": "Central registry for project metadata, API keys, JIRA project keys, Confluence space keys, and GitHub repositories. Use this first to get project configuration.",
      "transport": "http",
      "authentication": {
        "type": "bearer",
        "header": "Authorization",
        "note": "Use admin token for mutations, no auth for queries"
      },
      "tools": [
        {
          "name": "list_projects",
          "description": "List all registered projects",
          "endpoint": "/api/projects",
          "method": "GET"
        },
        {
          "name": "get_project",
          "description": "Get project by ID including JIRA project key, Confluence space key, GitHub repo, and API key",
          "endpoint": "/api/projects/:id",
          "method": "GET"
        },
        {
          "name": "create_project",
          "description": "Create a new project with metadata (requires admin token)",
          "endpoint": "/api/projects",
          "method": "POST"
        },
        {
          "name": "update_project",
          "description": "Update existing project metadata (requires admin token)",
          "endpoint": "/api/projects/:id",
          "method": "PUT"
        },
        {
          "name": "delete_project",
          "description": "Delete project (requires admin token)",
          "endpoint": "/api/projects/:id",
          "method": "DELETE"
        },
        {
          "name": "validate_token",
          "description": "Validate API token",
          "endpoint": "/api/validate-token",
          "method": "POST"
        }
      ]
    },
    "enhanced-context": {
      "name": "Enhanced Context MCP",
      "url": "https://enhanced-context-mcp.vercel.app",
      "description": "Intelligent context, template, and agent selection based on task intent, scope, and complexity. Provides SDLC guidance, quality checks, common mistakes to avoid, and best practices. USE THIS FIRST before creating any JIRA issues or documentation to get proper format, structure, and guidance.",
      "transport": "http",
      "authentication": {
        "type": "api-key",
        "header": "X-API-Key",
        "note": "Use project API key from Project Registry"
      },
      "tools": [
        {
          "name": "load_enhanced_context",
          "description": "Load intelligent contexts, templates, and agents based on task parameters. Returns: epic prefix format, story structure, acceptance criteria format, quality checks, common mistakes, best practices, SDLC step guidance, agent persona, and relevant templates.",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "list_vishkar_agents",
          "description": "List all available VISHKAR agent profiles (32 specialized agents including frontend, backend, cloud, security, testing, etc)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "load_vishkar_agent",
          "description": "Load specific agent profile by ID with complete persona, expertise, and examples",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_agent",
          "description": "Update existing agent with learning improvements (cannot create new agents)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "validate_vishkar_agent_profile",
          "description": "Validate agent profile format and completeness",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "refresh_agent_cache",
          "description": "Clear cached agent profiles and reload from disk",
          "endpoint": "/api/mcp",
          "method": "POST"
        }
      ]
    },
    "jira": {
      "name": "JIRA MCP",
      "url": "https://jira-mcp-pi.vercel.app",
      "description": "Complete JIRA management with 24 tools: create/update issues (epics, stories, tasks, subtasks, bugs), search with JQL, manage workflows, link dependencies, track time with worklogs, manage boards/sprints, search users, and query projects. Always use Enhanced Context MCP first to get proper epic prefix format and story structure before creating issues.",
      "transport": "http",
      "authentication": {
        "type": "api-key",
        "header": "X-API-Key",
        "note": "Use project API key from Project Registry"
      },
      "tools": [
        {
          "name": "search_issues",
          "description": "Search JIRA issues using JQL (JIRA Query Language). Examples: \"project = MYPROJ AND type = Epic\", \"Epic Link = MYPROJ-123\", \"assignee = currentUser() AND status != Done\"",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_issue",
          "description": "Get JIRA issue details by key with specified fields",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "create_issue",
          "description": "Create JIRA issue (Epic, Story, Task, Subtask, Bug). For epics: use epic_name field. For stories: use epic_link to link to parent epic. For subtasks: use parent_key to link to parent story.",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_issue",
          "description": "Update existing JIRA issue fields including summary, description, status, assignee, labels, priority, and custom fields",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "add_comment",
          "description": "Add comment to JIRA issue",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "transition_issue",
          "description": "Transition issue to different status (To Do, In Progress, In Review, Done, Blocked)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_issue_transitions",
          "description": "Get available transitions for an issue (workflow states)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "link_issues",
          "description": "Link two JIRA issues with relationship type (blocks, relates to, depends on, duplicates, causes)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_issue_links",
          "description": "Get all links for a specific issue (inward and outward links)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_dependency_tree",
          "description": "Get complete dependency tree for an issue (recursive dependency graph)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_link_types",
          "description": "Get available link types for the JIRA instance (blocks, relates to, etc.)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_boards",
          "description": "Get all JIRA boards (Scrum, Kanban) with optional filters by type or name",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_board_details",
          "description": "Get detailed information about a specific JIRA board by board ID",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_board_issues",
          "description": "Get all issues on a specific board with optional JQL filter",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_current_user",
          "description": "Get current authenticated user details (name, email, account ID)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "search_users",
          "description": "Search JIRA users by query string (name, email) with configurable max results",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_user_details",
          "description": "Get detailed user information by account ID",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_projects",
          "description": "Get list of all JIRA projects accessible to the authenticated user",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_project_details",
          "description": "Get detailed project information by project key including components, versions, roles",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "add_worklog",
          "description": "Log time spent on an issue with optional comment and start date (ISO 8601 format)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_worklogs",
          "description": "Get all time tracking worklogs for a specific issue",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_server_info",
          "description": "Get JIRA server information (version, build number, server time)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "create_sprint",
          "description": "Create a new sprint for a board with optional start date, end date, and sprint goal",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_sprint",
          "description": "Update sprint properties (name, state, dates, goal) by sprint ID",
          "endpoint": "/api/mcp",
          "method": "POST"
        }
      ]
    },
    "confluence": {
      "name": "Confluence MCP",
      "url": "https://confluence-mcp-six.vercel.app",
      "description": "Complete Confluence documentation management with 32 tools: spaces, pages, templates, attachments, folders, macros, labels, history, JIRA integration, and permissions. Upload documents, embed attachments, create page templates, insert JIRA macros, and manage page hierarchy. Use Enhanced Context MCP first to get proper documentation templates and structure.",
      "transport": "http",
      "authentication": {
        "type": "api-key",
        "header": "X-API-Key",
        "note": "Use project API key from Project Registry"
      },
      "tools": [
        {
          "name": "get_spaces",
          "description": "Get list of all Confluence spaces",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_space",
          "description": "Get details of a specific Confluence space by key",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_content_by_id",
          "description": "Get Confluence page content by page ID",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_content_by_space_and_title",
          "description": "Get Confluence page by space key and title",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "search",
          "description": "Search Confluence content using CQL (Confluence Query Language). Examples: \"type = page AND space = MYSP AND label = architecture\", \"title ~ Payment*\", \"created >= now(-7d)\"",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "create_page",
          "description": "Create a new Confluence page with title, content (HTML storage format), optional parent_id for hierarchical structure, and labels",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_page",
          "description": "Update an existing Confluence page content with version comment to track changes",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_page_children",
          "description": "Get child pages of a Confluence page (page hierarchy)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_page_attachments",
          "description": "Get attachments for a Confluence page",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "add_page_labels",
          "description": "Add labels to a Confluence page for categorization and search",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "upload_document",
          "description": "Upload document or file as attachment to a Confluence page",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_document",
          "description": "Update existing document attachment with new version",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "delete_document",
          "description": "Delete document attachment by attachment ID",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "list_documents",
          "description": "List all documents/attachments in a Confluence space",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "create_folder",
          "description": "Create folder (parent page) for organizing documentation hierarchy",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_folder_contents",
          "description": "Get all child pages within a folder (parent page)",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "move_page_to_folder",
          "description": "Move page to different parent folder in hierarchy",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "create_page_template",
          "description": "Create reusable page template for consistent documentation",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_page_templates",
          "description": "Get all available page templates in a space",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "apply_page_template",
          "description": "Create new page from existing template",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_page_template",
          "description": "Update existing page template content",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_pages_by_label",
          "description": "Find all pages tagged with specific label",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_page_history",
          "description": "Get version history of page changes with authors and timestamps",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "insert_macro",
          "description": "Insert Confluence macro (status, info, warning, code, etc.) into page",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "update_macro",
          "description": "Update existing macro parameters on page",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_page_macros",
          "description": "List all macros present on a page",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "link_page_to_jira_issue",
          "description": "Add link from Confluence page to JIRA issue",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "insert_jira_macro",
          "description": "Insert JIRA macro to display issues using JQL query with custom display options",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_space_permissions",
          "description": "Get permission settings for a Confluence space",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "embed_existing_attachment",
          "description": "Embed existing attachment as image or link in page content",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "upload_and_embed_document",
          "description": "Upload document and automatically embed it in page content",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "upload_and_embed_attachment",
          "description": "Upload file attachment and embed as image or link in one operation",
          "endpoint": "/api/mcp",
          "method": "POST"
        }
      ]
    },
    "storycrafter": {
      "name": "StoryCrafter MCP",
      "url": "https://storycrafter-mcp.vercel.app",
      "description": "AI-powered backlog generator for VISHKAR 3-agent consensus discussions. Generates 6-8 comprehensive epics with 20-40 detailed user stories, complete with acceptance criteria, technical tasks, story points, and time estimates. Use this AFTER Enhanced Context MCP when you have consensus messages and need to create a complete project backlog.",
      "transport": "http",
      "authentication": {
        "type": "none",
        "note": "No authentication required (service handles its own API keys)"
      },
      "tools": [
        {
          "name": "generate_backlog",
          "description": "Generate complete project backlog from VISHKAR 3-agent consensus discussion (system, alex, blake, casey messages). Returns structured backlog with 6-8 epics, 20-40 stories, acceptance criteria in Given/When/Then format, technical implementation tasks, story points (Fibonacci scale), estimated hours, dependencies, tags, and MVP prioritization. Takes 30-60 seconds to generate.",
          "endpoint": "/api/mcp",
          "method": "POST"
        },
        {
          "name": "get_backlog_summary",
          "description": "Extract summary statistics from a generated backlog: total epics, total stories, total hours, and breakdown by epic",
          "endpoint": "/api/mcp",
          "method": "POST"
        }
      ]
    }
  }
}